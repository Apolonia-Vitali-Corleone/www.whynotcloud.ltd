name: Deploy static site

on:
  push:
    branches: [ main ]
    paths:
      - 'site/**'
      - '.github/workflows/deploy-static.yml'
      - '.github/scripts/rewrite_refs.py'
  workflow_dispatch: {}

concurrency:
  group: static-site-deploy
  cancel-in-progress: true

env:
  AWS_REGION: ap-east-2
  ROLE_ARN: arn:aws:iam::818719120332:role/GitHubDeployerRole
  S3_BUCKET: www.whynotcloud.ltd
  CF_DISTRIBUTION_ID: E2WG51CXAQEGR5
  SITE_DIR: site

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Show workflow context
        shell: bash
        run: |
          set -euo pipefail
          echo "GITHUB_WORKSPACE: $GITHUB_WORKSPACE"
          echo "AWS_REGION: ${AWS_REGION}"
          echo "ROLE_ARN: ${ROLE_ARN}"
          echo "S3_BUCKET: ${S3_BUCKET}"
          echo "CF_DISTRIBUTION_ID: ${CF_DISTRIBUTION_ID}"
          echo "SITE_DIR (relative): ${SITE_DIR}"
          echo "SITE_DIR (absolute): $(realpath "${SITE_DIR}" 2>/dev/null || echo "<not found>")"
          echo "Commit: ${GITHUB_SHA}"
          echo "::group::List SITE_DIR (maxdepth=2)"
          find "${SITE_DIR}" -maxdepth 2 -type f -print | sort || true
          echo "::endgroup::"

      - name: Configure AWS (assume role)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Who am I (AWS identity)
        shell: bash
        run: aws sts get-caller-identity

      # ========= 指纹化：只处理非 HTML 文件；HTML 保持原名 =========
      - name: Fingerprint assets (non-HTML only)
        shell: bash
        run: |
          set -euo pipefail
          SRC_DIR="${SITE_DIR}"
          DIST_DIR="dist"
          rm -rf "$DIST_DIR" && mkdir -p "$DIST_DIR"

          # 1) 复制所有 HTML 原样
          find "${SRC_DIR}" -type f -name '*.html' -print0 \
            | while IFS= read -r -d '' f; do
                rel="${f#${SRC_DIR}/}"
                mkdir -p "${DIST_DIR}/$(dirname "$rel")"
                cp -a "$f" "${DIST_DIR}/${rel}"
              done

          # 2) 对非 HTML 文件加指纹并复制；记录 original_rel -> hashed_rel
          MAPPING_FILE="${DIST_DIR}/.fingerprint_map.txt"
          : > "$MAPPING_FILE"
          while IFS= read -r -d '' f; do
            rel="${f#${SRC_DIR}/}"
            dir="$(dirname "$rel")"
            base="$(basename "$rel")"
            name="${base%.*}"
            ext="${base##*.}"
            if [[ "$base" == "$ext" ]]; then ext=""; dot=""; else dot="."; fi
            hash="$(sha256sum "$f" | cut -c1-10)"
            dst_dir="${DIST_DIR}/${dir}"
            mkdir -p "$dst_dir"
            hashed="${name}.${hash}${dot}${ext}"
            cp -a "$f" "${dst_dir}/${hashed}"
            printf '%s %s\n' "$rel" "${dir}/${hashed}" >> "$MAPPING_FILE"
          done < <(find "${SRC_DIR}" -type f ! -name '*.html' -print0)

          echo "::group::Built (before rewrite)"
          find "$DIST_DIR" -maxdepth 2 -type f -print | sort
          echo "::endgroup::"

      - name: Rewrite references (href/src/url(...))
        shell: bash
        run: |
          set -euo pipefail
          python3 ".github/scripts/rewrite_refs.py" --dist "dist" --mapping "dist/.fingerprint_map.txt"

      # 指纹资源：长缓存 + immutable；排除所有 .html
      - name: Upload versioned assets (long cache)
        shell: bash
        run: |
          set -euo pipefail
          aws s3 sync "dist/" "s3://${S3_BUCKET}/" \
            --delete \
            --exclude "*.html" \
            --cache-control "public, max-age=31536000, immutable"

      # 所有 HTML：禁止缓存（覆盖整个站点的 .html）
      - name: Upload HTML (no cache)
        shell: bash
        run: |
          set -euo pipefail
          aws s3 sync "dist/" "s3://${S3_BUCKET}/" \
            --exclude "*" --include "*.html" \
            --cache-control "no-cache, no-store, max-age=0, must-revalidate" \
            --content-type "text/html; charset=utf-8"

      - name: Invalidate CloudFront (all HTML entry points)
        shell: bash
        run: |
          set -euo pipefail
          DIST_DIR="dist"

          if [[ ! -d "$DIST_DIR" ]]; then
            echo "Dist dir not found: $DIST_DIR"
            exit 1
          fi

          # 必备：根路径与首页
          PATHS=("/" "/index.html")

          # 收集所有 .html；对 */index.html 额外加入目录形式 (/dir/)
          while IFS= read -r -d '' f; do
            rel="${f#${DIST_DIR}/}"      # 相对 dist/
            [[ -z "$rel" ]] && continue
            p="/${rel}"                  # 例如 /cn/index.html 或 /about.html
            PATHS+=("$p")
            base="$(basename "$rel")"
            dir="/$(dirname "$rel")"
            if [[ "$base" == "index.html" ]]; then
              [[ "$dir" == "/." ]] && dir="/"
              PATHS+=("${dir%/}/")
            fi
          done < <(find "$DIST_DIR" -type f -name '*.html' -print0)

          # 去重 & 规范化（确保以 / 开头）
          declare -A seen=()
          uniq_paths=()
          for p in "${PATHS[@]}"; do
            [[ "${p:0:1}" != "/" ]] && p="/${p}"
            if [[ -z "${seen[$p]+x}" ]]; then
              uniq_paths+=("$p")
              seen[$p]=1
            fi
          done

          total="${#uniq_paths[@]}"
          echo "Will invalidate ${total} unique paths."
          if (( total == 0 )); then
            echo "No paths to invalidate; skipping."
            exit 0
          fi
          if (( total > 1000 )); then
            echo "Collected ${total} paths (>1000). Please narrow invalidation or split."
            exit 1
          fi

          # 打印清单，便于排查
          printf 'Path: %s\n' "${uniq_paths[@]}"

          # 执行失效
          export AWS_PAGER=""
          aws cloudfront create-invalidation \
            --no-cli-pager \
            --distribution-id "${CF_DISTRIBUTION_ID}" \
            --paths "${uniq_paths[@]}"
